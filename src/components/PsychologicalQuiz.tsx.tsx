import React, { useState } from 'react';
import { AlertCircle, CheckCircle, ChevronRight, Send, ChevronLeft, Book, Users, Music } from 'lucide-react';

const PsychologicalQuiz = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [answers, setAnswers] = useState({});
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [name, setName] = useState('');
  const [submitted, setSubmitted] = useState(false);

  const questions = [
    {
      id: 1,
      text: "–Ø–∫ –≤–∏ –ø–æ—á—É–≤–∞—î—Ç–µ—Å—è –æ—Å—Ç–∞–Ω–Ω—ñ–º —á–∞—Å–æ–º?",
      options: [
        { text: "–ß—É–¥–æ–≤–æ, —Å—Ç–∞–±—ñ–ª—å–Ω–æ –π –ø–æ–∑–∏—Ç–∏–≤–Ω–æ", emoji: "üòä" },
        { text: "–ù–æ—Ä–º–∞–ª—å–Ω–æ, –∞–ª–µ –±—É–≤–∞—é—Ç—å –≤–∞–∂–∫—ñ –º–æ–º–µ–Ω—Ç–∏", emoji: "üôÇ" },
        { text: "–ß–∞—Å—Ç–æ –≤—ñ–¥—á—É–≤–∞—é —Å—Ç—Ä–µ—Å –∞–±–æ –∑–∞–Ω–µ–ø–æ–∫–æ—î–Ω–Ω—è", emoji: "üòü" },
        { text: "–ü–æ—Å—Ç—ñ–π–Ω–æ –≤—Ç–æ–º–ª–µ–Ω–∏–π/-–∞, —Å–∫–ª–∞–¥–Ω–æ —Ä–æ–∑—Å–ª–∞–±–∏—Ç–∏—Å—å", emoji: "üòû" }
      ],
      visualType: "emotional"
    },
    {
      id: 2,
      text: "–ß–∏ –ø–æ–º—ñ—á–∞–ª–∏ –≤–∏ –∑–∞ —Å–æ–±–æ—é —Ö–æ—á–∞ –± –æ–¥–Ω—É –∑ —Ü–∏—Ö –æ–∑–Ω–∞–∫: –¥—Ä–∞—Ç—ñ–≤–ª–∏–≤—ñ—Å—Ç—å, –ø–æ–≥–∞–Ω–∏–π —Å–æ–Ω, –ø–æ—Å—Ç—ñ–π–Ω–µ –Ω–∞–ø—Ä—É–∂–µ–Ω–Ω—è?",
      options: [
        { text: "–ù—ñ, –Ω—ñ—á–æ–≥–æ –∑ —Ü—å–æ–≥–æ", emoji: "üòä" },
        { text: "–Ü–Ω–æ–¥—ñ –±—É–≤–∞—î, –∞–ª–µ —Ä—ñ–¥–∫–æ", emoji: "üôÇ" },
        { text: "–î–æ—Å–∏—Ç—å —á–∞—Å—Ç–æ –æ—Å—Ç–∞–Ω–Ω—ñ–º —á–∞—Å–æ–º", emoji: "üòï" },
        { text: "–¢–∞–∫, —Ü—ñ –æ–∑–Ω–∞–∫–∏ —Å—Ç–∞–ª–∏ –º–æ—î—é –Ω–æ—Ä–º–æ—é –∂–∏—Ç—Ç—è", emoji: "üò´" }
      ],
      visualType: "standard"
    },
    {
      id: 3,
      text: "–ß–∏ —Ç—Ä–∞–ø–ª—è–ª–æ—Å—è –≤–∞–º –¥—É–º–∞—Ç–∏, —â–æ –≤–∏ ¬´–≤–∏–≥–æ—Ä–∞—î—Ç–µ¬ª?",
      options: [
        { text: "–ù—ñ, —Ü–µ –Ω–µ –ø—Ä–æ –º–µ–Ω–µ", emoji: "üëç" },
        { text: "–Ü–Ω–∫–æ–ª–∏ —î —Ç–∞–∫–µ –≤—ñ–¥—á—É—Ç—Ç—è", emoji: "ü§î" },
        { text: "–¢–∞–∫, —á–∞—Å—Ç–æ –¥—É–º–∞—é –ø—Ä–æ —Ü–µ", emoji: "üî•" },
        { text: "–¢–∞–∫, –≤–ø–µ–≤–Ω–µ–Ω–∏–π/-–∞, —â–æ —Å–∞–º–µ —Ü–µ –∑—ñ –º–Ω–æ—é —ñ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è", emoji: "üí•" }
      ],
      alternativeOptions: [
        { label: "–ï–Ω–µ—Ä–≥—ñ–π–Ω–∏–π", icon: "‚ö°" },
        { label: "–í—Ç–æ–º–ª–µ–Ω–∏–π", icon: "üîã" },
        { label: "–í–∏—Å–Ω–∞–∂–µ–Ω–∏–π", icon: "üå°Ô∏è" }, 
        { label: "–í–∏–≥–æ—Ä–∞–Ω–Ω—è", icon: "üî•" }
      ],
      visualType: "energy"
    },
    {
      id: 4,
      text: "–ß–∏ –≤—ñ–¥—á—É–≤–∞—î—Ç–µ –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –≤—ñ–¥ —Å–≤–æ–≥–æ –æ—Ç–æ—á–µ–Ω–Ω—è?",
      options: [
        { text: "–¢–∞–∫, –º–∞—é –ø—ñ–¥—Ç—Ä–∏–º–∫—É –±–ª–∏–∑—å–∫–∏—Ö", emoji: "‚ù§Ô∏è" },
        { text: "–ù–µ –∑–∞–≤–∂–¥–∏, —ñ–Ω–æ–¥—ñ –ø–æ—á—É–≤–∞—é—Å—è —Å–∞–º–æ—Ç–Ω—ñ–º/-—å–æ—é", emoji: "üôÇ" },
        { text: "–ó–∞–∑–≤–∏—á–∞–π –Ω–µ –≤—ñ–¥—á—É–≤–∞—é –ø—ñ–¥—Ç—Ä–∏–º–∫–∏", emoji: "üòï" },
        { text: "–ü–æ—á—É–≤–∞—é—Å—è –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–∞–º–æ—Ç–Ω—å–æ —É —Å–≤–æ—ó—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö", emoji: "üòî" }
      ],
      visualType: "standard"
    },
    {
      id: 5,
      text: "–ß–∏ —Ö–æ—Ç—ñ–ª–∏ –± –≤–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Å—Ç—ñ, –∞–ª–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó, —è–∫ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–≤—ñ–π —Å—Ç–∞–Ω —É–∂–µ —Å—å–æ–≥–æ–¥–Ω—ñ?",
      options: [
        { text: "–¢–∞–∫, —Ö–æ—á—É –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —è–∫ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏", emoji: "üëç" },
        { text: "–ú–æ–∂–ª–∏–≤–æ, –±—É–ª–æ –± —Ü—ñ–∫–∞–≤–æ", emoji: "ü§î" },
        { text: "–ù–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π/-–∞, —â–æ —Ü–µ –¥–æ–ø–æ–º–æ–∂–µ, –∞–ª–µ —Å–ø—Ä–æ–±—É—é", emoji: "üòê" },
        { text: "–ù—ñ, –º–µ–Ω—ñ —Ü–µ –Ω–µ —Ü—ñ–∫–∞–≤–æ", emoji: "üëé" }
      ],
      visualType: "standard"
    }
  ];

  const handleOptionSelect = (questionId, optionIndex) => {
    setAnswers({
      ...answers,
      [questionId]: optionIndex
    });
    
    // Auto-advance to next question after selection
    if (currentStep < questions.length) {
      setTimeout(() => setCurrentStep(currentStep + 1), 400);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // Here you would normally send the data to your backend
    setSubmitted(true);
    console.log("Form submitted:", { answers, email, phone, name });
  };

  const progressPercentage = currentStep <= questions.length 
    ? (currentStep / (questions.length + 1)) * 100
    : ((questions.length) / (questions.length + 1)) * 100;

  // Calculate stress level based on answers
  const calculateStressLevel = () => {
    // Simple algorithm: higher score = higher stress level
    let score = 0;
    const maxScore = questions.length * 3; // Max possible score if all answers are the most stressed option
    
    for (const questionId in answers) {
      score += answers[questionId] || 0; // Add the answer index (0-3) to score
    }
    
    // Calculate percentage (0-100)
    return Math.min(Math.round((score / maxScore) * 100), 100);
  };
  
  // Get stress level label
  const getStressLevelLabel = (percentage) => {
    if (percentage < 25) return "–ù–∏–∑—å–∫–∏–π";
    if (percentage < 50) return "–°–µ—Ä–µ–¥–Ω—ñ–π";
    if (percentage < 75) return "–ü—ñ–¥–≤–∏—â–µ–Ω–∏–π";
    return "–í–∏—Å–æ–∫–∏–π";
  };
  
  // Generate recommendations based on answers
  const getRecommendations = () => {
    return [
      {
        title: "–î–∏—Ö–∞–ª—å–Ω—ñ –≤–ø—Ä–∞–≤–∏",
        description: "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –≥–ª–∏–±–æ–∫–µ –¥–∏—Ö–∞–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º 5 —Ö–≤–∏–ª–∏–Ω –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ –¥–µ–Ω—å.",
        icon: <AlertCircle className="h-5 w-5 text-white" />
      },
      {
        title: "–í–µ–¥–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏–∫–∞",
        description: "–ó–∞–ø–∏—Å—É–π—Ç–µ —Å–≤–æ—ó –¥—É–º–∫–∏ —Ç–∞ –ø–æ—á—É—Ç—Ç—è, —â–æ–± –∫—Ä–∞—â–µ —Ä–æ–∑—É–º—ñ—Ç–∏ —Å–≤–æ—ó –µ–º–æ—Ü—ñ—ó.",
        icon: <Book className="h-5 w-5 text-white" />
      },
      {
        title: "–°–æ—Ü—ñ–∞–ª—å–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞",
        description: "–ù–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥–æ –¥—Ä—É–∑—ñ–≤ –∞–±–æ —Å—ñ–º'—ó.",
        icon: <Users className="h-5 w-5 text-white" />
      }
    ];
  };

  // Render intro screen
  if (currentStep === 0) {
    return (
      <div className="min-h-screen bg-gray-50 p-4 flex flex-col">
        {/* Blue header with title */}
        <div className="max-w-md mx-auto w-full rounded-t-xl overflow-hidden">
          <div className="bg-blue-500 p-6 text-center text-white">
            <h1 className="text-3xl font-bold mb-6 leading-tight">
              90% –ª—é–¥–µ–π –Ω–µ –ø–æ–º—ñ—á–∞—é—Ç—å –æ–∑–Ω–∞–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–æ—ó –∫—Ä–∏–∑–∏. –ê –≤–∏?
            </h1>
            
            {/* Stats row */}
            <div className="flex justify-center gap-8 mt-6 mb-2">
              <div className="flex items-center">
                <div className="bg-blue-400 bg-opacity-30 p-2 rounded-full mr-3">
                  <AlertCircle className="h-5 w-5 text-white" />
                </div>
                <div className="text-left">
                  <div className="font-bold text-xl">14,378</div>
                  <div className="text-xs text-blue-100">–í–∂–µ –ø—Ä–æ–π—à–ª–∏</div>
                </div>
              </div>
              
              <div className="flex items-center">
                <div className="bg-blue-400 bg-opacity-30 p-2 rounded-full mr-3">
                  <AlertCircle className="h-5 w-5 text-white" />
                </div>
                <div className="text-left">
                  <div className="font-bold text-xl">58 —Å–µ–∫</div>
                  <div className="text-xs text-blue-100">–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å</div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* White content area */}
        <div className="max-w-md mx-auto w-full bg-white rounded-b-xl shadow-lg p-6 flex flex-col">
          {/* Button - MOVED UP */}
          <button 
            onClick={() => setCurrentStep(1)}
            className="w-full py-3 px-6 bg-blue-500 hover:bg-blue-600 text-white font-bold rounded-lg shadow-md transition-colors flex items-center justify-center text-lg uppercase mb-4"
          >
            –ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç
            <ChevronRight className="ml-2 h-5 w-5" />
          </button>
          
          {/* Time estimate - MOVED UP */}
          <div className="bg-blue-50 py-2 px-3 rounded-md text-center mb-6">
            <p className="font-medium text-blue-700">
              –¢–µ—Å—Ç –∑–∞–π–º–µ –Ω–µ –±—ñ–ª—å—à–µ 1 —Ö–≤–∏–ª–∏–Ω–∏.
            </p>
          </div>
          
          {/* Warning section with border */}
          <div className="border-l-4 border-blue-500 pl-4 py-2 mb-5">
            <p className="text-gray-700">
              <span className="text-red-500 font-bold">‚ö†Ô∏è –£–≤–∞–≥–∞!</span> –°—Ç—Ä–µ—Å —ñ —Ç—Ä–∏–≤–æ–≥–∞ —Å—Ç–∞–ª–∏ –Ω–∞—Å—Ç—ñ–ª—å–∫–∏ –∑–≤–∏—á–Ω–∏–º–∏, —â–æ –º–∏ –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ —ó—Ö –ø–æ–º—ñ—á–∞—Ç–∏. –ê–ª–µ –Ω–∞—Å–ª—ñ–¥–∫–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ <span className="text-red-500 font-medium">—Å–µ—Ä–π–æ–∑–Ω–∏–º–∏ —ñ –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∏–º–∏</span>, —è–∫—â–æ –≤—á–∞—Å–Ω–æ –Ω–µ –≤–∏—è–≤–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É.
            </p>
          </div>
          
          {/* List items with icons */}
          <div className="space-y-4 mb-4">
            <div className="flex items-start">
              <div className="flex-shrink-0 text-gray-500 mr-2 mt-1">‚è±Ô∏è</div>
              <p className="text-gray-700">
                <span className="font-medium">–õ–∏—à–µ 5 –ø—Ä–æ—Å—Ç–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å</span> –¥–æ–ø–æ–º–æ–∂—É—Ç—å –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à —Ä–∏–∑–∏–∫ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–æ—ó –∫—Ä–∏–∑–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω –¥—ñ–π –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ —Å—Ç–∞–Ω—É.
              </p>
            </div>
            
            <div className="flex items-start">
              <div className="flex-shrink-0 text-green-500 mr-2 mt-1">‚úÖ</div>
              <p className="text-gray-700">
                <span className="font-medium">–¢–µ—Å—Ç –ø—Ä–æ–π—à–ª–∏ –≤–∂–µ <span className="text-blue-500">14,378</span></span> —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤ —ñ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–≤–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è!
              </p>
            </div>
          </div>
          
          {/* Trust indicators */}
          <div className="mt-4 flex justify-center">
            <div className="flex items-center text-xs text-gray-500">
              <CheckCircle className="h-4 w-4 text-green-500 mr-1" />
              <span>–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ</span>
              <span className="mx-2">‚Ä¢</span>
              <CheckCircle className="h-4 w-4 text-green-500 mr-1" />
              <span>–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ</span>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Render questions
  const currentQuestion = questions[currentStep - 1];
  
  // Render different question layouts based on visualType
  const renderQuestionContent = () => {
    // For energy level visualization
    if (currentQuestion.visualType === 'energy') {
      return (
        <>
          {/* Alternative interactive UI for energy level question */}
          <div className="mb-6 flex justify-center flex-wrap gap-4">
            {currentQuestion.alternativeOptions.map((option, index) => (
              <button
                key={index}
                onClick={() => handleOptionSelect(currentQuestion.id, index)}
                className={`relative flex flex-col items-center p-3 rounded-lg border transition-all ${
                  answers[currentQuestion.id] === index
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-blue-300 hover:bg-blue-50'
                }`}
                style={{ width: 'calc(50% - 8px)' }}
              >
                <div className={`p-3 rounded-full mb-2 ${
                  answers[currentQuestion.id] === index 
                    ? 'bg-blue-100 text-blue-600' 
                    : 'bg-gray-100 text-gray-600'
                }`}>
                  <span className="text-2xl">{option.icon}</span>
                </div>
                <span className="text-sm font-medium">{option.label}</span>
                {answers[currentQuestion.id] === index && (
                  <div className="absolute right-2 top-2 h-4 w-4 bg-blue-500 rounded-full"></div>
                )}
              </button>
            ))}
          </div>
          
          <div className="border-t border-gray-200 pt-4 mt-2">
            <p className="text-sm text-gray-500 mb-4">–ê–±–æ –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –Ω–∏–∂—á–µ:</p>
          </div>
        </>
      );
    }
    
    // For emotional state visualization
    if (currentQuestion.visualType === 'emotional') {
      const emotionColors = [
        'bg-green-100 text-green-600',
        'bg-blue-100 text-blue-600',
        'bg-yellow-100 text-yellow-600',
        'bg-red-100 text-red-600'
      ];
      
      return (
        <div className="mb-6 grid grid-cols-2 gap-3">
          {currentQuestion.options.map((option, index) => (
            <button
              key={index}
              onClick={() => handleOptionSelect(currentQuestion.id, index)}
              className={`flex flex-col items-center p-4 rounded-lg border transition-all ${
                answers[currentQuestion.id] === index
                  ? 'border-blue-500 shadow-sm'
                  : 'border-gray-200 hover:border-blue-300'
              }`}
            >
              <div className={`h-12 w-12 flex items-center justify-center rounded-full mb-2 ${
                answers[currentQuestion.id] === index 
                  ? 'bg-blue-500 text-white' 
                  : emotionColors[index]
              }`}>
                <span className="text-2xl">{option.emoji}</span>
              </div>
              <span className="text-xs text-center">{option.text}</span>
            </button>
          ))}
        </div>
      );
    }
    
    // Default standard view
    return (
      <div className="space-y-3 mb-6">
        {currentQuestion.options.map((option, index) => (
          <button
            key={index}
            onClick={() => handleOptionSelect(currentQuestion.id, index)}
            className={`w-full py-3 px-4 rounded-lg border text-left transition-all ${
              answers[currentQuestion.id] === index
                ? 'border-blue-500 bg-blue-50'
                : 'border-gray-200 hover:border-blue-300 hover:bg-blue-50'
            }`}
          >
            <div className="flex items-center">
              <div className={`h-5 w-5 rounded-full border flex-shrink-0 flex items-center justify-center mr-3 ${
                answers[currentQuestion.id] === index
                  ? 'border-blue-500 bg-white'
                  : 'border-gray-300'
              }`}>
                {answers[currentQuestion.id] === index && (
                  <span className="h-3 w-3 bg-blue-500 rounded-full"></span>
                )}
              </div>
              <div className="flex items-center">
                <span className="mr-2 text-lg">{option.emoji}</span>
                <span>{option.text}</span>
              </div>
            </div>
            {answers[currentQuestion.id] === index && (
              <div className="w-1 h-full bg-blue-500 absolute left-0 top-0 rounded-l-lg"></div>
            )}
          </button>
        ))}
      </div>
    );
  };
  
  // Render form submission screen
  if (currentStep > questions.length) {
    const stressLevel = calculateStressLevel();
    const stressLabel = getStressLevelLabel(stressLevel);
    const recommendations = getRecommendations();
    
    return (
      <div className="min-h-screen bg-gray-50 p-4 flex flex-col">
        <div className="max-w-md mx-auto w-full bg-white rounded-xl shadow-lg p-6 mb-4">
          {/* Stress level section */}
          <div className="mb-6">
            <h2 className="text-xl font-semibold text-blue-600 text-center mb-3">
              –†—ñ–≤–µ–Ω—å –≤–∞—à–æ–≥–æ —Å—Ç—Ä–µ—Å—É
            </h2>
            <div className="relative h-3 bg-gray-200 rounded-full mb-2">
              <div 
                className={`absolute left-0 top-0 h-3 rounded-full transition-all duration-500`}
                style={{ 
                  width: `${stressLevel}%`,
                  background: `linear-gradient(to right, rgb(74, 222, 128), rgb(234, 179, 8), rgb(244, 63, 94))`
                }}
              ></div>
            </div>
            <div className="flex justify-between text-xs text-gray-500 mb-4">
              <span>–ù–∏–∑—å–∫–∏–π</span>
              <span>–°–µ—Ä–µ–¥–Ω—ñ–π</span>
              <span>–ü—ñ–¥–≤–∏—â–µ–Ω–∏–π</span>
              <span>–í–∏—Å–æ–∫–∏–π</span>
            </div>
            <p className="text-gray-700">
              –í–∞—à —Ä—ñ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—É <span className="font-medium">{stressLabel.toLowerCase()}</span>. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–æ—á–∞—Ç–∏ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ —Ç–µ—Ö–Ω—ñ–∫–∏ –∑–Ω–∏–∂–µ–Ω–Ω—è —Å—Ç—Ä–µ—Å—É —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è.
            </p>
          </div>
          
          {/* Recommendations section */}
          <div className="mb-6">
            <h2 className="text-xl font-semibold text-blue-600 text-center mb-4">
              –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –≤–∞—Å
            </h2>
            <div className="space-y-3">
              {recommendations.map((rec, index) => (
                <div key={index} className="bg-blue-50 p-4 rounded-lg flex">
                  <div className="bg-blue-500 p-2 rounded-full mr-3 h-8 w-8 flex-shrink-0 flex items-center justify-center">
                    {rec.icon}
                  </div>
                  <div>
                    <h3 className="font-medium text-blue-800">{rec.title}</h3>
                    <p className="text-sm text-gray-600">{rec.description}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Detailed analysis section */}
          <div className="mb-6">
            <h2 className="text-xl font-semibold text-blue-600 text-center mb-4">
              –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–∏–π –∞–Ω–∞–ª—ñ–∑
            </h2>
            
            <div className="mb-4">
              <div className="flex justify-center mb-2">
                {[1, 2, 3, 4, 5].map(star => (
                  <span key={star} className="text-yellow-400 text-xl">‚òÖ</span>
                ))}
              </div>
              <p className="text-sm text-gray-500 text-center">
                4.85 –Ω–∞ –æ—Å–Ω–æ–≤—ñ 422 –≤—ñ–¥–≥—É–∫—ñ–≤
              </p>
            </div>
            
            <div className="space-y-2 mb-4">
              <div className="flex items-start">
                <input type="checkbox" checked readOnly className="mt-1 mr-2" />
                <span className="text-sm">–ü–æ–≤–Ω–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –≤–∞—à–æ–≥–æ —Å—Ç–∞–Ω—É</span>
              </div>
              <div className="flex items-start">
                <input type="checkbox" checked readOnly className="mt-1 mr-2" />
                <span className="text-sm">7 –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –≤—ñ–¥ –ø—Å–∏—Ö–æ–ª–æ–≥–∞</span>
              </div>
              <div className="flex items-start">
                <input type="checkbox" checked readOnly className="mt-1 mr-2" />
                <span className="text-sm">PDF-–¥–æ–∫—É–º–µ–Ω—Ç –∑ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–º–∏ –≤–ø—Ä–∞–≤–∞–º–∏</span>
              </div>
              <div className="flex items-start">
                <input type="checkbox" checked readOnly className="mt-1 mr-2" />
                <span className="text-sm">–ë–æ–Ω—É—Å: 15-—Ö–≤–∏–ª–∏–Ω–Ω–∞ –∞—É–¥—ñ–æ-–º–µ–¥–∏—Ç–∞—Ü—ñ—è</span>
              </div>
            </div>
          </div>

          {!submitted ? (
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="mb-6 text-center">
                <div className="h-16 w-16 bg-blue-100 rounded-full mx-auto mb-4 flex items-center justify-center">
                  <Send className="h-8 w-8 text-blue-600" />
                </div>
                <h2 className="text-xl font-semibold text-gray-800">
                  –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–π–∂–µ –≥–æ—Ç–æ–≤–∏–π!
                </h2>
                <p className="text-gray-600 mt-2">
                  –ó–∞–ª–∏—à—Ç–µ —Å–≤—ñ–π e-mail, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é —â–æ–¥–æ –ø–æ–ª—ñ–ø—à–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ —Å—Ç–∞–Ω—É –≤—ñ–¥ Spokiy AI –ø—Ä–æ—Å—Ç–æ –∑–∞—Ä–∞–∑.
                </p>
              </div>
              
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
                  –í–∞—à–µ —ñ–º'—è
                </label>
                <input
                  type="text"
                  id="name"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è"
                />
              </div>
              
              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                  –í–∞—à e-mail *
                </label>
                <input
                  type="email"
                  id="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                  className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à email"
                />
              </div>
              
              <div>
                <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">
                  –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)
                </label>
                <input
                  type="tel"
                  id="phone"
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                  className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω"
                />
              </div>
              
              <button
                type="submit"
                className="w-full py-3 px-4 bg-blue-600 hover:bg-blue-700 text-white font-bold rounded-lg shadow-md transition-colors flex items-center justify-center"
              >
                –û—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                <ChevronRight className="ml-2 h-4 w-4" />
              </button>
              
              {/* Trust indicators */}
              <div className="mt-3 flex justify-center">
                <div className="flex items-center text-xs text-gray-500">
                  <CheckCircle className="h-4 w-4 text-green-500 mr-1" />
                  <span>–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ</span>
                  <span className="mx-2">‚Ä¢</span>
                  <CheckCircle className="h-4 w-4 text-green-500 mr-1" />
                  <span>–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ</span>
                </div>
              </div>
            </form>
          ) : (
            <div className="text-center py-8">
              <div className="h-16 w-16 bg-green-100 rounded-full mx-auto mb-4 flex items-center justify-center">
                <CheckCircle className="h-10 w-10 text-green-600" />
              </div>
              <h3 className="text-xl font-semibold text-gray-800 mb-2">–î—è–∫—É—î–º–æ!</h3>
              <p className="text-gray-600">
                –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –≤–∫–∞–∑–∞–Ω—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É.
              </p>
            </div>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4 flex flex-col">
      <div className="max-w-md mx-auto w-full bg-white rounded-xl shadow-lg p-6 my-auto">
        {/* Progress bar */}
        <div className="w-full bg-gray-200 rounded-full h-2 mb-6">
          <div
            className="bg-blue-500 h-2 rounded-full transition-all duration-500"
            style={{ width: `${progressPercentage}%` }}
          ></div>
        </div>
        
        {/* Question container with number badge */}
        <div className="bg-blue-50 rounded-lg p-4 mb-6 relative">
          <div className="absolute -left-1 -top-1 w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold">
            {currentStep}
          </div>
          <h2 className="text-lg font-medium text-gray-800 pl-6">
            {currentQuestion.text}
          </h2>
        </div>
        
        {/* Render appropriate question layout */}
        {renderQuestionContent()}
        
        {/* Navigation buttons */}
        <div className="flex justify-between">
          <button
            onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}
            className="py-2 px-4 border border-gray-300 rounded-lg flex items-center text-gray-600 hover:bg-gray-50"
          >
            <ChevronLeft className="h-4 w-4 mr-1" />
            –ù–ê–ó–ê–î
          </button>
          
          <button
            onClick={() => setCurrentStep(currentStep + 1)}
            className="py-2 px-4 bg-blue-500 text-white rounded-lg flex items-center hover:bg-blue-600"
          >
            –î–ê–õ–Ü
            <ChevronRight className="h-4 w-4 ml-1" />
          </button>
        </div>
        
        {/* Progress indicator dots - FIXED */}
        <div className="mt-8">
          <div className="flex justify-between items-center">
            <p className="text-xs text-blue-600">
              –ü–∏—Ç–∞–Ω–Ω—è {currentStep} –∑ {questions.length}
            </p>
            <p className="text-xs text-blue-600">
              {Math.round(progressPercentage)}% –ø—Ä–æ–π–¥–µ–Ω–æ
            </p>
          </div>
          
          <div className="mt-2 relative">
            {/* Background progress line */}
            <div className="absolute left-0 right-0 top-1.5 h-0.5 bg-gray-200"></div>
            
            {/* Foreground progress line */}
            <div 
              className="absolute left-0 top-1.5 h-0.5 bg-blue-500 transition-all duration-500"
              style={{ width: `${progressPercentage}%` }}
            ></div>
            
            {/* Progress dots - now on top of the lines */}
            <div className="relative flex justify-between">
              {[...Array(questions.length)].map((_, i) => (
                <div 
                  key={i} 
                  className={`h-3 w-3 rounded-full z-10 ${i < currentStep ? 'bg-blue-500' : 'bg-gray-300'}`}
                  style={{ 
                    transition: 'background-color 0.3s ease'
                  }}
                ></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PsychologicalQuiz;
