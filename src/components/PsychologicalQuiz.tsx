import React, { useState } from 'react';
import { AlertCircle, CheckCircle, ChevronRight, Send, ChevronLeft, Book, Users, Music } from 'lucide-react';

const PsychologicalQuiz = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [answers, setAnswers] = useState<Record<string, number>>({});
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [name, setName] = useState('');
  const [submitted, setSubmitted] = useState(false);

  const questions = [
    {
      id: 1,
      text: "–Ø–∫ –≤–∏ –ø–æ—á—É–≤–∞—î—Ç–µ—Å—è –æ—Å—Ç–∞–Ω–Ω—ñ–º —á–∞—Å–æ–º?",
      options: [
        { text: "–ß—É–¥–æ–≤–æ, —Å—Ç–∞–±—ñ–ª—å–Ω–æ –π –ø–æ–∑–∏—Ç–∏–≤–Ω–æ", emoji: "üòä" },
        { text: "–ù–æ—Ä–º–∞–ª—å–Ω–æ, –∞–ª–µ –±—É–≤–∞—é—Ç—å –≤–∞–∂–∫—ñ –º–æ–º–µ–Ω—Ç–∏", emoji: "üôÇ" },
        { text: "–ß–∞—Å—Ç–æ –≤—ñ–¥—á—É–≤–∞—é —Å—Ç—Ä–µ—Å –∞–±–æ –∑–∞–Ω–µ–ø–æ–∫–æ—î–Ω–Ω—è", emoji: "üòü" },
        { text: "–ü–æ—Å—Ç—ñ–π–Ω–æ –≤—Ç–æ–º–ª–µ–Ω–∏–π/-–∞, —Å–∫–ª–∞–¥–Ω–æ —Ä–æ–∑—Å–ª–∞–±–∏—Ç–∏—Å—å", emoji: "üòû" }
      ],
      visualType: "emotional"
    },
    {
      id: 2,
      text: "–ß–∏ –ø–æ–º—ñ—á–∞–ª–∏ –≤–∏ –∑–∞ —Å–æ–±–æ—é —Ö–æ—á–∞ –± –æ–¥–Ω—É –∑ —Ü–∏—Ö –æ–∑–Ω–∞–∫: –¥—Ä–∞—Ç—ñ–≤–ª–∏–≤—ñ—Å—Ç—å, –ø–æ–≥–∞–Ω–∏–π —Å–æ–Ω, –ø–æ—Å—Ç—ñ–π–Ω–µ –Ω–∞–ø—Ä—É–∂–µ–Ω–Ω—è?",
      options: [
        { text: "–ù—ñ, –Ω—ñ—á–æ–≥–æ –∑ —Ü—å–æ–≥–æ", emoji: "üòä" },
        { text: "–Ü–Ω–æ–¥—ñ –±—É–≤–∞—î, –∞–ª–µ —Ä—ñ–¥–∫–æ", emoji: "üôÇ" },
        { text: "–î–æ—Å–∏—Ç—å —á–∞—Å—Ç–æ –æ—Å—Ç–∞–Ω–Ω—ñ–º —á–∞—Å–æ–º", emoji: "üòï" },
        { text: "–¢–∞–∫, —Ü—ñ –æ–∑–Ω–∞–∫–∏ —Å—Ç–∞–ª–∏ –º–æ—î—é –Ω–æ—Ä–º–æ—é –∂–∏—Ç—Ç—è", emoji: "üò´" }
      ],
      visualType: "standard"
    },
    {
      id: 3,
      text: "–ß–∏ —Ç—Ä–∞–ø–ª—è–ª–æ—Å—è –≤–∞–º –¥—É–º–∞—Ç–∏, —â–æ –≤–∏ ¬´–≤–∏–≥–æ—Ä–∞—î—Ç–µ¬ª?",
      options: [
        { text: "–ù—ñ, —Ü–µ –Ω–µ –ø—Ä–æ –º–µ–Ω–µ", emoji: "üëç" },
        { text: "–Ü–Ω–∫–æ–ª–∏ —î —Ç–∞–∫–µ –≤—ñ–¥—á—É—Ç—Ç—è", emoji: "ü§î" },
        { text: "–¢–∞–∫, —á–∞—Å—Ç–æ –¥—É–º–∞—é –ø—Ä–æ —Ü–µ", emoji: "üî•" },
        { text: "–¢–∞–∫, –≤–ø–µ–≤–Ω–µ–Ω–∏–π/-–∞, —â–æ —Å–∞–º–µ —Ü–µ –∑—ñ –º–Ω–æ—é —ñ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è", emoji: "üí•" }
      ],
      alternativeOptions: [
        { label: "–ï–Ω–µ—Ä–≥—ñ–π–Ω–∏–π", icon: "‚ö°" },
        { label: "–í—Ç–æ–º–ª–µ–Ω–∏–π", icon: "üîã" },
        { label: "–í–∏—Å–Ω–∞–∂–µ–Ω–∏–π", icon: "üå°Ô∏è" },
        { label: "–í–∏–≥–æ—Ä–∞–Ω–Ω—è", icon: "üî•" }
      ],
      visualType: "energy"
    },
    {
      id: 4,
      text: "–ß–∏ –≤—ñ–¥—á—É–≤–∞—î—Ç–µ –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –≤—ñ–¥ —Å–≤–æ–≥–æ –æ—Ç–æ—á–µ–Ω–Ω—è?",
      options: [
        { text: "–¢–∞–∫, –º–∞—é –ø—ñ–¥—Ç—Ä–∏–º–∫—É –±–ª–∏–∑—å–∫–∏—Ö", emoji: "‚ù§Ô∏è" },
        { text: "–ù–µ –∑–∞–≤–∂–¥–∏, —ñ–Ω–æ–¥—ñ –ø–æ—á—É–≤–∞—é—Å—è —Å–∞–º–æ—Ç–Ω—ñ–º/-—å–æ—é", emoji: "üôÇ" },
        { text: "–ó–∞–∑–≤–∏—á–∞–π –Ω–µ –≤—ñ–¥—á—É–≤–∞—é –ø—ñ–¥—Ç—Ä–∏–º–∫–∏", emoji: "üòï" },
        { text: "–ü–æ—á—É–≤–∞—é—Å—è –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–∞–º–æ—Ç–Ω—å–æ —É —Å–≤–æ—ó—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö", emoji: "üòî" }
      ],
      visualType: "standard"
    },
    {
      id: 5,
      text: "–ß–∏ —Ö–æ—Ç—ñ–ª–∏ –± –≤–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Å—Ç—ñ, –∞–ª–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó, —è–∫ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–≤—ñ–π —Å—Ç–∞–Ω —É–∂–µ —Å—å–æ–≥–æ–¥–Ω—ñ?",
      options: [
        { text: "–¢–∞–∫, —Ö–æ—á—É –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —è–∫ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏", emoji: "üëç" },
        { text: "–ú–æ–∂–ª–∏–≤–æ, –±—É–ª–æ –± —Ü—ñ–∫–∞–≤–æ", emoji: "ü§î" },
        { text: "–ù–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π/-–∞, —â–æ —Ü–µ –¥–æ–ø–æ–º–æ–∂–µ, –∞–ª–µ —Å–ø—Ä–æ–±—É—é", emoji: "üòê" },
        { text: "–ù—ñ, –º–µ–Ω—ñ —Ü–µ –Ω–µ —Ü—ñ–∫–∞–≤–æ", emoji: "üëé" }
      ],
      visualType: "standard"
    }
  ];

  const handleOptionSelect = (questionId: number, optionIndex: number): void => {
    setAnswers({
      ...answers,
      [questionId]: optionIndex,
    });
    if (currentStep < questions.length) {
      setTimeout(() => setCurrentStep(currentStep + 1), 400);
    }
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {
    e.preventDefault();
    setSubmitted(true);
    console.log("Form submitted:", { answers, email, phone, name });
  };

  const progressPercentage = currentStep <= questions.length
    ? (currentStep / (questions.length + 1)) * 100
    : (questions.length / (questions.length + 1)) * 100;

  const calculateStressLevel = (): number => {
    let score = 0;
    const maxScore = questions.length * 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –º–æ–∂–ª–∏–≤–∏–π –±–∞–ª
    Object.entries(answers).forEach(([_, value]) => {
      score += value;
    });
    return Math.min(Math.round((score / maxScore) * 100), 100);
  };

  const getStressLevelLabel = (percentage: number): string => {
    if (percentage < 25) return "–ù–∏–∑—å–∫–∏–π";
    if (percentage < 50) return "–°–µ—Ä–µ–¥–Ω—ñ–π";
    if (percentage < 75) return "–ü—ñ–¥–≤–∏—â–µ–Ω–∏–π";
    return "–í–∏—Å–æ–∫–∏–π";
  };

  const getRecommendations = () => {
    return [
      {
        title: "–î–∏—Ö–∞–ª—å–Ω—ñ –≤–ø—Ä–∞–≤–∏",
        description: "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –≥–ª–∏–±–æ–∫–µ –¥–∏—Ö–∞–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º 5 —Ö–≤–∏–ª–∏–Ω –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ –¥–µ–Ω—å.",
        icon: <AlertCircle />
      },
      {
        title: "–í–µ–¥–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏–∫–∞",
        description: "–ó–∞–ø–∏—Å—É–π—Ç–µ —Å–≤–æ—ó –¥—É–º–∫–∏ —Ç–∞ –ø–æ—á—É—Ç—Ç—è, —â–æ–± –∫—Ä–∞—â–µ —Ä–æ–∑—É–º—ñ—Ç–∏ —Å–≤–æ—ó –µ–º–æ—Ü—ñ—ó.",
        icon: <Book />
      },
      {
        title: "–°–æ—Ü—ñ–∞–ª—å–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞",
        description: "–ù–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥–æ –¥—Ä—É–∑—ñ–≤ –∞–±–æ —Å—ñ–º'—ó.",
        icon: <Users />
      }
    ];
  };

  // –Ø–∫—â–æ —Ü–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ (—ñ–Ω—Ç—Ä–æ)
  if (currentStep === 0) {
    return (
      <div className="container">
        <div className="card">
          <div className="header">
            <h1>90% –ª—é–¥–µ–π –Ω–µ –ø–æ–º—ñ—á–∞—é—Ç—å –æ–∑–Ω–∞–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–æ—ó –∫—Ä–∏–∑–∏. –ê –≤–∏?</h1>
          </div>
          <div className="content">
            <button className="btn-primary" onClick={() => setCurrentStep(1)}>
              –ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç <ChevronRight />
            </button>
          </div>
        </div>
      </div>
    );
  }

  // –Ø–∫—â–æ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –ø–∏—Ç–∞–Ω–Ω—è
  const currentQuestion = questions[currentStep - 1];
  const renderQuestionContent = () => {
    return (
      <div className="question-card">
        <span className="question-number">{currentQuestion.id}</span>
        <div className="question-text">{currentQuestion.text}</div>
        <div>
          {currentQuestion.options.map((option, index) => (
            <div
              key={index}
              className={`answer-option ${answers[currentQuestion.id] === index ? 'selected' : ''}`}
              onClick={() => handleOptionSelect(currentQuestion.id, index)}
            >
              <span className="answer-emoji">{option.emoji}</span>
              <span>{option.text}</span>
            </div>
          ))}
        </div>
      </div>
    );
  };

  // –Ø–∫—â–æ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ–π–¥–µ–Ω—ñ ‚Äì —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
  if (currentStep > questions.length) {
    const stressLevel = calculateStressLevel();
    const stressLabel = getStressLevelLabel(stressLevel);
    const recommendations = getRecommendations();
    return (
      <div className="container">
        <div className="card">
          <div className="header">
            <h2>–í–∞—à —Ä—ñ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—É: {stressLabel}</h2>
          </div>
          <div className="content">
            <p>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stressLevel}%</p>
            <h2>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –≤–∞—Å</h2>
            {recommendations.map((rec, index) => (
              <div key={index} className="recommendation-item">
                <div className="recommendation-icon">{rec.icon}</div>
                <div>
                  <div className="recommendation-title">{rec.title}</div>
                  <div className="recommendation-text">{rec.description}</div>
                </div>
              </div>
            ))}
            <form onSubmit={handleSubmit}>
              <div className="form-group">
                <label className="form-label" htmlFor="name">–í–∞—à–µ —ñ–º'—è</label>
                <input
                  type="text"
                  id="name"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  className="form-input"
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è"
                />
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="email">–í–∞—à e-mail *</label>
                <input
                  type="email"
                  id="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                  className="form-input"
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à email"
                />
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="phone">–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)</label>
                <input
                  type="tel"
                  id="phone"
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                  className="form-input"
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω"
                />
              </div>
              <button type="submit" className="btn-primary">
                –û—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç <ChevronRight />
              </button>
            </form>
          </div>
        </div>
      </div>
    );
  }

  // –Ø–∫—â–æ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–∏—Ç–∞–Ω–Ω—è –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é
  return (
    <div className="container">
      {renderQuestionContent()}
      <div className="flex" style={{ justifyContent: 'space-between' }}>
        <button className="btn-secondary" onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}>
          –ù–ê–ó–ê–î <ChevronLeft />
        </button>
        <button className="btn-next" onClick={() => setCurrentStep(currentStep + 1)}>
          –î–ê–õ–Ü <ChevronRight />
        </button>
      </div>
    </div>
  );
};

export default PsychologicalQuiz;
